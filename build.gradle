/*##############################
Gradle Configuration
##############################*/
plugins {
    id 'checkstyle'
    id 'findbugs'
    id 'io.franzbecker.gradle-lombok' version '1.10'
    id 'jacoco'
    id 'java'
    id 'pmd'
}

defaultTasks 'clean', 'build', 'check', 'jTR', 'jTCV'


/*##############################
Project Configuration
##############################*/
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest{
        attributes (
            "Fw-Version" : "0.0.3"
        )
    }
    
    baseName 'groupme4j'
}


/*##############################
Dependency Configuration
##############################*/
repositories {
    jcenter()
}

dependencies {
    // COMPILE
    // Logging
    compile("org.slf4j:slf4j-api:1.7.5")

    // Jackson Json Converter
    compile("com.fasterxml.jackson.core:jackson-databind:2.9.0")
    
    // okhttp
    compile group:'com.squareup.okhttp3', name:'okhttp', version:'3.9.0'
    
    // Joda DateTime
    compile group: 'joda-time', name: 'joda-time', version: '2.3'
    
    
    // TESTING
    // Unit Testing
    testCompile("junit:junit:4.12")
    
    // Test Logging
    testCompile("org.slf4j:slf4j-simple:1.7.25")

    // Pojo Testing
    testCompile("com.openpojo:openpojo:0.8.8")

    // Pojo Equals Testing
    testCompile("nl.jqno.equalsverifier:equalsverifier:2.4.3")
    testCompile("org.meanbean:meanbean:2.0.3")
    testCompile("com.google.guava:guava:24.0-jre")
    testCompile("javassist:javassist:3.12.1.GA")
}

/*##############################
Test Configuration
##############################*/
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        info {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR
            exceptionFormat TestExceptionFormat.FULL
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
            }
        }
    }
}

/*##############################
Checkstyle Configuration
##############################*/
checkstyle {
    toolVersion = 8.8
    configFile = new File(rootDir, '/src/main/resources/checkstyle.xml')
}

/*##############################
FindBugs Configuration
##############################*/
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

/*##############################
Jacoco Configuration
##############################*/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}